"""Marks an element of a GraphQL schema as no longer supported."""
directive @deprecated(
  """
  Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).
  """
  reason: String = "No longer supported"
) on ARGUMENT_DEFINITION | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(
  """Included when true."""
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(
  """Skipped when true."""
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!
  description: String
  isRepeatable: Boolean!
  locations: [__DirectiveLocation!]!
  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """Location adjacent to a query operation."""
  QUERY

  """Location adjacent to a mutation operation."""
  MUTATION

  """Location adjacent to a subscription operation."""
  SUBSCRIPTION

  """Location adjacent to a field."""
  FIELD

  """Location adjacent to a fragment definition."""
  FRAGMENT_DEFINITION

  """Location adjacent to a fragment spread."""
  FRAGMENT_SPREAD

  """Location adjacent to an inline fragment."""
  INLINE_FRAGMENT

  """Location adjacent to a variable definition."""
  VARIABLE_DEFINITION

  """Location adjacent to a schema definition."""
  SCHEMA

  """Location adjacent to a scalar definition."""
  SCALAR

  """Location adjacent to an object type definition."""
  OBJECT

  """Location adjacent to a field definition."""
  FIELD_DEFINITION

  """Location adjacent to an argument definition."""
  ARGUMENT_DEFINITION

  """Location adjacent to an interface definition."""
  INTERFACE

  """Location adjacent to a union definition."""
  UNION

  """Location adjacent to an enum definition."""
  ENUM

  """Location adjacent to an enum value definition."""
  ENUM_VALUE

  """Location adjacent to an input object type definition."""
  INPUT_OBJECT

  """Location adjacent to an input object field definition."""
  INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!
  description: String
  args(includeDeprecated: Boolean = false): [__InputValue!]!
  type: __Type!
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!
  description: String
  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """A list of all types supported by this server."""
  types: [__Type!]!

  """The type that query operations will be rooted at."""
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """A list of all directives supported by this server."""
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!
  name: String
  description: String
  specifiedByURL: String
  fields(includeDeprecated: Boolean = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  inputFields(includeDeprecated: Boolean = false): [__InputValue!]
  ofType: __Type
  isOneOf: Boolean
}

"""An enum describing what kind of type a given `__Type` is."""
enum __TypeKind {
  """Indicates this type is a scalar."""
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """Indicates this type is a union. `possibleTypes` is a valid field."""
  UNION

  """Indicates this type is an enum. `enumValues` is a valid field."""
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """Indicates this type is a list. `ofType` is a valid field."""
  LIST

  """Indicates this type is a non-null. `ofType` is a valid field."""
  NON_NULL
}
schema {
  query: Query
  mutation: Mutation
}

type Application {
  comment: String
  email: String!
  posting: Posting
  referralEarnings: Float!
  user: User
}

enum AuthScopes {
  EMAIL
  GOOGLE
  INSTAGRAM
  PHONE
}

type Chat {
  conversation: Int!
  hasRead: Boolean!
  messages(page: Float): [Message!]!
  preview: String!
  with: User!
}

type Currency {
  code: String
  name: String
  symbol: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type GetFeaturedPostsResponse {
  creatorImage: String!
  creatorName: String!
  creatorUsername: String!
  er: Float!
  likes: Float!
  mediaURL: String!
  postURL: String!
  thumbnailURL: String!
}

type InstagramMedia {
  caption: String
  comments: Int!
  er: Float
  likes: Int!
  link: String!
  thumbnail: String!
  type: InstagramMediaType!
}

enum InstagramMediaType {
  CarouselAlbum
  Image
  Video
}

type InstagramStats {
  averageComments: Int!
  averageLikes: Int!
  er: Float!
  followers: Int!
  isVerified: Boolean!
  mediaCount: Int!
  username: String!
}

type Location {
  city: String
  country: String
  currency: Currency
}

type LocationID {
  city: Float
  country: Float
  state: Float
}

type Message {
  body: String!
  sender: Int!
  sentAt: DateTimeISO!
}

type Mutation {
  applyToPosting(comment: String, email: String!, postingID: Float!): Boolean!
  completeOnboarding: Boolean!
  createPosting(newPosting: NewPostingInput!): Float
  deletePosting(postingID: Float!): Boolean!
  disconnectGoogle: Boolean!
  disconnectInstagram: Boolean!
  pausePosting(postingID: Float!): Boolean!
  readMessage(conversationID: Int!): Boolean!
  resumePosting(postingID: Float!): Boolean!
  sendMessage(body: String!, conversationID: Int!): Boolean!
  updateOnboardingBasicDetails(basicDetails: OnboardingBasicDetailsInput!): Boolean!
  updateOnboardingDOB(dobDetails: OnboardingDOBInput!): Boolean!
  updateOnboardingInstagramUsername(username: String!): Boolean!
  updateOnboardingLocation(locationDetails: OnboardingLocationInput!): Currency!
  updateOnboardingPricing(pricingDetails: OnboardingPriceInput!): Boolean!
  updateOnboardingUsername(usernameDetails: OnboardingUsernameInput!): Boolean!
  updatePosting(id: Float!, updatedPosting: UpdatePostingInput!): Boolean!
  updateUser(updatedUser: UpdateUserInput!): Boolean!
  updateUserLocation(updatedLocation: UpdateLocation!): Boolean!
}

input NewPostingInput {
  barter: Boolean!
  currencyCountry: Int
  deliverables: [String!]
  description: String!
  externalLink: String
  extraDetails: String
  maximumAge: Float
  minimumAge: Float
  minimumFollowers: Float
  platforms: [PostingPlatforms!]!
  price: Int
  title: String!
}

input OnboardingBasicDetailsInput {
  bio: String!
  category: String!
  dob: String
  gender: String!
  imageURL: String
  name: String!
}

input OnboardingDOBInput {
  dob: String!
}

type OnboardingData {
  bio: String
  category: String
  city: Float
  country: Float
  currency: Currency
  dob: String
  gender: String
  name: String
  photo: String
  pricing: Pricing
  state: Float
  username: String
}

input OnboardingLocationInput {
  city: Float
  country: Float!
  state: Float!
}

input OnboardingPriceInput {
  starting: Float!
}

input OnboardingUsernameInput {
  username: String!
}

type Posting {
  applicationsCount: Int!
  barter: Boolean!
  createdAt: Float!
  currency: String
  currencyCountry: Int
  deliverables: [String!]
  description: String!
  externalLink: String
  extraDetails: String
  id: Float!
  maximumAge: Int
  minimumAge: Int
  minimumFollowers: Int
  open: Boolean!
  platforms: [PostingPlatforms!]!
  price: Int
  referralEarnings: Float!
  title: String!
  updatedAt: Float!
  user: User
}

enum PostingPlatforms {
  INSTAGRAM
  YOUTUBE
}

type Pricing {
  starting: Float
}

input PricingInput {
  starting: Float
}

type Query {
  getAllPostings: [Posting!]!
  getChat(userID: Int!): Chat
  getChats: [Chat!]!
  getCities(stateID: Int!): [SelectOption!]!
  getCountries: [SelectOption!]!
  getCurrentUser: User
  getFeaturedPostings: [Posting!]!
  getFeaturedPosts: [GetFeaturedPostsResponse!]!
  getFeaturedSellers: [User!]!
  getHasUserApplied(postingID: Float!): Boolean!
  getPosting(id: Int!): Posting
  getPostingApplications(postingID: Int!): [Application!]!
  getSeller(username: String!): User
  getStates(countryID: Int!): [SelectOption!]!
  getUserApplications: [Application!]!
  getUserPostings: [Posting!]!
  isUsernameAvailable(username: String!): Boolean!
  searchSellers(filters: SearchSellersFilters!): [User!]
  __schema: __Schema!
  __type(name: String!): __Type
}

enum ROLES {
  ADMIN
  ReferralCreator
  SELLER
}

input SearchSellersFilters {
  ageRange: Int
  categories: [String!]
  cities: [Int!]
  countries: [Int!]
  followersFrom: Int
  followersTo: Int
  genders: [String!]
  generalPriceFrom: Float
  generalPriceTo: Float
  query: String
  states: [Int!]
}

type SelectOption {
  label: String!
  value: Int!
}

type StorageFile {
  uploadURL: String!
  url: String!
}

input UpdateLocation {
  city: Float
  country: Float!
  state: Float!
}

input UpdatePostingInput {
  barter: Boolean!
  currencyCountry: Int
  deliverables: [String!]
  description: String!
  externalLink: String
  extraDetails: String
  maximumAge: Float
  minimumAge: Float
  minimumFollowers: Float
  platforms: [PostingPlatforms!]!
  price: Int
}

input UpdateUserInput {
  bio: String
  category: String
  contactEmail: String
  dob: String
  gender: String
  name: String
  photo: String
  pricing: PricingInput
  username: String
}

type User {
  bio: String
  category: String
  contactEmail: String
  dob: String
  email: String
  gender: String
  id: Float!
  instagramMedia: [InstagramMedia!]
  instagramStats: InstagramStats
  isOnboarded: Boolean
  location: Location
  locationID: LocationID
  name: String
  onboardingData: OnboardingData
  phone: String
  photo: String
  pictureUploadURL: StorageFile!
  pricing: Pricing
  roles: [ROLES!]
  scopes: [AuthScopes!]!
  username: String
}